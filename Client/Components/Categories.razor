@using BlazorApp.Shared
@inject HttpClient Http

<h3>Categories</h3>

<RecursiveCategoryNode CurrentNode=@root Depth="1" Root=@root OnChildAction="HandleChildAction" />
<button @onclick="ConfirmSelection">Confirm Selection</button>


@code {

    private List<List<string>> nestedLists = new List<List<string>>();
    List<string> categories = new List<string>();
    CategoryNode root = new CategoryNode { Name = "All Categories", IsChecked = false };

    [Parameter]
    public EventCallback<List<string>> OnCategoriesSelected { get; set; }

    private async Task ConfirmSelection()
    {
        List<string> selectedCategories = GetSelectedCategories(root);
        // Invoke the event callback with the selected categories
        await OnCategoriesSelected.InvokeAsync(selectedCategories);
    }

    private async Task HandleChildAction()
    {
        // Child component has called for a re-rendering
        StateHasChanged();
    }

    private void CreateCategoriesTree()
    {
        foreach (string originalString in categories)
        {
            var categoryNames = originalString.Split(',');
            var currentNode = root;

            foreach (var categoryName in categoryNames)
            {
                var existingChild = currentNode.Children.FirstOrDefault(c => c.Name == categoryName);
                if (existingChild != null)
                {
                    currentNode = existingChild;
                }
                else
                {
                    var newChild = new CategoryNode
                    {
                        Name = categoryName,
                        IsChecked = false,
                        FullCategory = currentNode == root ? categoryName : currentNode.FullCategory + "," + categoryName
                    };
                    currentNode.Children.Add(newChild);
                    currentNode = newChild;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<string>>("/api/FlashcardCategories") ?? new List<string>();

            foreach (string category in categories)
            {
                List<string> categoryValues = category.Split(',').ToList();
                nestedLists.Add(categoryValues);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        CreateCategoriesTree();
    }

    private List<string> GetSelectedCategories(CategoryNode node)
    {
        List<string> selectedCategories = new List<string>();

        if (node.Children == null || node.Children.Count == 0)
        {
            if (node.IsChecked)
            {
                selectedCategories.Add(node.FullCategory);
            }
        }
        else
        {
            foreach (var child in node.Children)
            {
                selectedCategories.AddRange(GetSelectedCategories(child));
            }
        }

        return selectedCategories;
    }
}